diff --git a/main/external/debugger-libs b/main/external/debugger-libs
index ede9fdb73d..153d5d437b 160000
--- a/main/external/debugger-libs
+++ b/main/external/debugger-libs
@@ -1 +1 @@
-Subproject commit ede9fdb73dc634eb6d513d3d00bc1ecbaf9b3b00
+Subproject commit 153d5d437b1b9e71f131993b695c5925ca03ad54
diff --git a/main/src/core/MonoDevelop.Ide/ExtensionModel/Commands.addin.xml b/main/src/core/MonoDevelop.Ide/ExtensionModel/Commands.addin.xml
index bbd8721a7a..1b85d80c46 100644
--- a/main/src/core/MonoDevelop.Ide/ExtensionModel/Commands.addin.xml
+++ b/main/src/core/MonoDevelop.Ide/ExtensionModel/Commands.addin.xml
@@ -789,13 +789,14 @@
 	<!-- HelpCommands -->
 	<Category _name = "Help" id = "Help">
 
+	<!---
 	<Command id = "MonoDevelop.Ide.Commands.HelpCommands.Help"
 			_label = "API Documentation"
 			icon = "gtk-help"
 			_description = "Show help"
 			defaultHandler = "MonoDevelop.Ide.Commands.HelpHandler"
 			shortcut = "F1"
-			macShortcut = "Meta|Alt|?" />
+			macShortcut = "Meta|Alt|?" /> -->
 	<Command id = "MonoDevelop.Ide.Commands.HelpCommands.TipOfTheDay"
 			defaultHandler = "MonoDevelop.Ide.Commands.TipOfTheDayHandler"
 			_label = "_Tip of the Day"
diff --git a/main/src/core/MonoDevelop.Ide/ExtensionModel/MainMenu.addin.xml b/main/src/core/MonoDevelop.Ide/ExtensionModel/MainMenu.addin.xml
index e9ed0c256e..3976e5cf7a 100644
--- a/main/src/core/MonoDevelop.Ide/ExtensionModel/MainMenu.addin.xml
+++ b/main/src/core/MonoDevelop.Ide/ExtensionModel/MainMenu.addin.xml
@@ -278,8 +278,8 @@
 			<LinkItem id = "Mono" _label = "Mono Project" description = "A free .NET implementation effort, worth visiting" link = "http://www.mono-project.com" />
 		</Condition>
 		<SeparatorItem id = "Separator3" />
-		<LinkItem id = "ReportBug" _label = "Report Problem..." link = "http://xamar.in/r/file_studio_bug" />
-		<SeparatorItem id = "DiagnosticToolsSeparator" />
+		<!-- <LinkItem id = "ReportBug" _label = "Report Problem..." link = "http://xamar.in/r/file_studio_bug" />
+		<SeparatorItem id = "DiagnosticToolsSeparator" /> -->
 		<CommandItem id = "MonoDevelop.Ide.Commands.HelpCommands.OpenLogDirectory" />
 		<CommandItem id = "MonoDevelop.Ide.Commands.ToolCommands.InstrumentationViewer" />
 		<Condition id = "Platform" value = "!mac">
diff --git a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/ErrorListPad.cs b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/ErrorListPad.cs
index 9c04a7f4cf..c6f70c29c7 100644
--- a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/ErrorListPad.cs
+++ b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui.Pads/ErrorListPad.cs
@@ -276,12 +276,12 @@ namespace MonoDevelop.Ide.Gui.Pads
 			control.FocusChain = new Gtk.Widget [] { outputView };
 		}
 
-		public override void Dispose ()
+		public override void Dispose ()
 		{
 			IdeApp.Workspace.FirstWorkspaceItemOpened -= OnCombineOpen;
 			IdeApp.Workspace.LastWorkspaceItemClosed -= OnCombineClosed;
-
-			base.Dispose ();
+
+			base.Dispose ();
 		}
 		
 		void HandleSwSizeAllocated (object o, SizeAllocatedArgs args)
@@ -369,10 +369,10 @@ namespace MonoDevelop.Ide.Gui.Pads
 			
 			var group = new ActionGroup ("Popup");
 
-			var help = new Gtk.Action ("help", GettextCatalog.GetString ("Show Error Reference"),
-				GettextCatalog.GetString ("Show Error Reference"), Gtk.Stock.Help);
-			help.Activated += OnShowReference;
-			group.Add (help, "F1");
+//			var help = new Gtk.Action ("help", GettextCatalog.GetString ("Show Error Reference"),
+//				GettextCatalog.GetString ("Show Error Reference"), Gtk.Stock.Help);
+//			help.Activated += OnShowReference;
+//			group.Add (help, "F1");
 
 			var copy = new Gtk.Action ("copy", GettextCatalog.GetString ("_Copy"),
 				GettextCatalog.GetString ("Copy task"), Gtk.Stock.Copy);
@@ -441,7 +441,7 @@ namespace MonoDevelop.Ide.Gui.Pads
 			uiManager.InsertActionGroup (group, 0);
 			
 			string uiStr = "<ui><popup name='popup'>"
-				+ "<menuitem action='help'/>"
+//				+ "<menuitem action='help'/>"
 				+ "<menuitem action='copy'/>"
 				+ "<menuitem action='jump'/>"
 				+ "<separator/>"
@@ -480,7 +480,7 @@ namespace MonoDevelop.Ide.Gui.Pads
 						columnFile.Active ||
 						columnPath.Active);
 				string dummyString;
-				help.Sensitive &= GetSelectedErrorReference (out dummyString);
+				// help.Sensitive &= GetSelectedErrorReference (out dummyString);
 			};
 			
 			return menu;
@@ -976,11 +976,11 @@ namespace MonoDevelop.Ide.Gui.Pads
 
 		static int CategoryIterSort (TreeModel model, TreeIter a, TreeIter z)
 		{
-			TaskListEntry aTask = model.GetValue (a, DataColumns.Task) as TaskListEntry,
-				 zTask = model.GetValue (z, DataColumns.Task) as TaskListEntry;
-
-			return (aTask?.Category != null && zTask?.Category != null) ?
-			       string.Compare (aTask.Category, zTask.Category, StringComparison.Ordinal) :
+			TaskListEntry aTask = model.GetValue (a, DataColumns.Task) as TaskListEntry,
+				 zTask = model.GetValue (z, DataColumns.Task) as TaskListEntry;
+
+			return (aTask?.Category != null && zTask?.Category != null) ?
+			       string.Compare (aTask.Category, zTask.Category, StringComparison.Ordinal) :
 			       0;
 		}
 
diff --git a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui/StartupInfo.cs b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui/StartupInfo.cs
index 9a7e1c5206..57c0254d09 100644
--- a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui/StartupInfo.cs
+++ b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide.Gui/StartupInfo.cs
@@ -62,7 +62,7 @@ namespace MonoDevelop.Ide.Gui
 		/// Matches a filename string with optional line and column 
 		/// (/foo/bar/blah.cs;22;31)
 		/// </summary>
-		public static readonly Regex FileExpression = new Regex (@"^(?<filename>[^;]+)(;(?<line>\d+))?(;(?<column>\d+))?$", RegexOptions.Compiled);
+		public static readonly Regex FileExpression = new Regex (@"^(?<filename>[^;]+)(;(?<line>-?\d+))?(;(?<column>-?\d+))?$", RegexOptions.Compiled);
 		
 		public StartupInfo (IEnumerable<string> args)
 		{
diff --git a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/Ide.cs b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/Ide.cs
index fdff8bb25e..0a1a81aac5 100644
--- a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/Ide.cs
+++ b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/Ide.cs
@@ -333,14 +333,16 @@ namespace MonoDevelop.Ide
 			
 			//open the firsts sln/workspace file, and remove the others from the list
 		 	//FIXME: can we handle multiple slns?
-			bool foundSln = false;
+			bool foundSln = false;
+			IAsyncOperation openSolutionOperation = null;
 			foreach (var file in files) {
 				if (Services.ProjectService.IsWorkspaceItemFile (file.FileName) ||
 				    Services.ProjectService.IsSolutionItemFile (file.FileName)) {
 					if (!foundSln) {
 						try {
-							Workspace.OpenWorkspaceItem (file.FileName);
-							foundSln = true;
+							var op = Workspace.OpenWorkspaceItem (file.FileName);
+							foundSln = true;
+							openSolutionOperation = op;
 						} catch (Exception ex) {
 							MessageService.ShowError (GettextCatalog.GetString ("Could not load solution: {0}", file.FileName), ex);
 						}
@@ -348,8 +350,15 @@ namespace MonoDevelop.Ide
 				} else {
 					filteredFiles.Add (file);
 				}
-			}
-			
+			}
+			
+			// Wait for solution and it's open files to load, so we are sure
+			// that the files we open afterwards are actually opened in tabs
+			// after the solution's saved open files and that the last file
+			// in the filteredFiles gets focus, if specified as an option.
+			if (filteredFiles.Count > 0 && openSolutionOperation != null)
+				openSolutionOperation.WaitForCompleted();
+
 			foreach (var file in filteredFiles) {
 				try {
 					Workbench.OpenDocument (file.FileName, null, file.Line, file.Column, file.Options);
diff --git a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/IdeStartup.cs b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/IdeStartup.cs
index 404b3fa13b..52485d61ec 100644
--- a/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/IdeStartup.cs
+++ b/main/src/core/MonoDevelop.Ide/MonoDevelop.Ide/IdeStartup.cs
@@ -62,7 +62,7 @@ namespace MonoDevelop.Ide
 		Socket listen_socket   = null;
 		ArrayList errorsList = new ArrayList ();
 		bool initialized;
-		static readonly int ipcBasePort = 40000;
+		static readonly int ipcBasePort = 41000;
 		
 		Task<int> IApplication.Run (string[] args)
 		{
@@ -143,12 +143,12 @@ namespace MonoDevelop.Ide
 			if (!options.NewWindow && startupInfo.HasFiles) {
 				Counters.Initialization.Trace ("Pre-Initializing Runtime to load files in existing window");
 				Runtime.Initialize (true);
-				foreach (var file in startupInfo.RequestedFileList) {
-					if (MonoDevelop.Projects.Services.ProjectService.IsWorkspaceItemFile (file.FileName)) {
-						options.NewWindow = true;
-						break;
-					}
-				}
+//				foreach (var file in startupInfo.RequestedFileList) {
+//					if (MonoDevelop.Projects.Services.ProjectService.IsWorkspaceItemFile (file.FileName)) {
+//						options.NewWindow = true;
+//						break;
+//					}
+//				}
 			}
 			
 			Counters.Initialization.Trace ("Initializing Runtime");
@@ -193,6 +193,15 @@ namespace MonoDevelop.Ide
 					// Reset the socket
 					if (null != socket_filename && File.Exists (socket_filename))
 						File.Delete (socket_filename);
+
+					if (options.IpcTcp) {
+						try {
+							listen_socket.Close();
+							listen_socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);
+						} catch (Exception exc) {
+							LoggingService.LogError("Error resetting TCP socket", exc);
+						}
+					}
 				}
 			}
 			
@@ -601,6 +610,26 @@ namespace MonoDevelop.Ide
 						"may not be properly installed in the GAC.",
 						BrandingService.ApplicationName
 					), ex);
+
+				if (Platform.IsWindows)
+				{
+					string url = "http://monodevelop.com/Download";
+					string caption = "Fatal Error";
+					string message =
+						"{0} failed to start. Some of the assemblies required to run {0} (for example GTK#) " +
+						"may not be properly installed in the GAC.\n\r\n\r" +
+						"Please click OK to open the download page, where " +
+						"you can download the necessary dependencies for {0} to run.";
+
+					if (DisplayWindowsOkCancelMessage(
+						string.Format(message, BrandingService.ApplicationName, url), caption)
+					)
+					{
+						Process.Start(url);
+					}
+				}
+
+
 			} finally {
 				Runtime.Shutdown ();
 			}
