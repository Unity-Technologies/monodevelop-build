diff --git a/Mono.Addins/Mono.Addins.Database/AddinDatabase.cs b/Mono.Addins/Mono.Addins.Database/AddinDatabase.cs
index 3201c0e..32939b8 100644
--- a/Mono.Addins/Mono.Addins.Database/AddinDatabase.cs
+++ b/Mono.Addins/Mono.Addins.Database/AddinDatabase.cs
@@ -1812,7 +1812,7 @@ namespace Mono.Addins.Database
 						if (fileDatabase.Exists (ConfigFile))
 							config = DatabaseConfiguration.Read (ConfigFile);
 						else
-							config = new DatabaseConfiguration ();
+							config = DatabaseConfiguration.ReadAppConfig ();
 					}
 				}
 				return config;
diff --git a/Mono.Addins/Mono.Addins.Database/DatabaseConfiguration.cs b/Mono.Addins/Mono.Addins.Database/DatabaseConfiguration.cs
index 77270bf..3144b40 100644
--- a/Mono.Addins/Mono.Addins.Database/DatabaseConfiguration.cs
+++ b/Mono.Addins/Mono.Addins.Database/DatabaseConfiguration.cs
@@ -76,10 +76,6 @@ namespace Mono.Addins.Database
 			AddinStatus s;
 			addinStatus.TryGetValue (addinName, out s);
 			
-			if (enabled == defaultValue) {
-				addinStatus.Remove (addinName);
-				return;
-			}
 			if (s == null)
 				s = addinStatus [addinName] = new AddinStatus (addinName);
 			s.Enabled = enabled;
@@ -121,6 +117,34 @@ namespace Mono.Addins.Database
 		
 		public static DatabaseConfiguration Read (string file)
 		{
+			var config = ReadInternal (file);
+			// Try to read application level config to support disabling add-ins by default.
+			var appConfig = ReadAppConfig ();
+
+			if (appConfig == null)
+				return config;
+
+			// Overwrite app config values with user config values
+			foreach (var entry in config.addinStatus)
+				appConfig.addinStatus [entry.Key] = entry.Value;
+
+			return appConfig;
+		}
+		
+		public static DatabaseConfiguration ReadAppConfig()
+		{
+			var assemblyPath = System.Reflection.Assembly.GetExecutingAssembly ().Location;
+			var assemblyDirectory = Path.GetDirectoryName (assemblyPath);
+			var appAddinsConfigFilePath = Path.Combine (assemblyDirectory, "addins-config.xml");
+
+			if (!File.Exists (appAddinsConfigFilePath))
+				return new DatabaseConfiguration ();
+
+			return ReadInternal (appAddinsConfigFilePath);
+		}
+
+		static DatabaseConfiguration ReadInternal (string file)
+		{
 			DatabaseConfiguration config = new DatabaseConfiguration ();
 			XmlDocument doc = new XmlDocument ();
 			doc.Load (file);
