use File::Path;
use File::Basename qw(dirname basename fileparse);

my $frameworkversion = "4.8.1";
my $monosymlinkpath = "/tmp/unity-monodevelop-monoframework-$frameworkversion";

print "Updating Mono Framework $frameworkversion\n";

my $scriptDir = File::Spec->rel2abs( dirname($0) );

my $mf = "$scriptDir/Mono.framework";

rmtree($mf);

my $current = "$mf/Versions/Current";
system("mkdir -p $current");

die "Cannot find monoframework to copy" if (not -d "/Library/Frameworks/Mono.framework");

system("cp -R /Library/Frameworks/Mono.framework/Versions/$frameworkversion/* $current");
#rmtree("$current/lib/mono/gac");
#rmtree("$current/lib/mono/xbuild-frameworks");
rmtree("$current/lib/mono/monodroid");
rmtree("$current/lib/mono/monotouch");
rmtree("$current/lib/ironruby");
rmtree("$current/lib/ironpython");
rmtree("$current/lib/mono/boo");
rmtree("$current/lib/mono/2.0-api");
rmtree("$current/lib/mono/Reference Assemblies");
#rmtree("$current/lib/monodoc");
rmtree("$current/include");
#rmtree("$current/share/xml");
rmtree("$current/share/autoconf");
rmtree("$current/share/automake-1.13");
rmtree("$current/share/libtool");
rmtree("$current/share/man");
#rmtree("$current/etc/xml");
#rmtree("$current/lib/mono/xbuild");
rmtree("$current/lib/mono/Microsoft SDKs");
rmtree("$current/lib/mono/Microsoft F#");

#system("rm $current/lib/*.a");
#system("rm -r $current/lib/*.dSYM");
#system("rm -r $current/lib/*llvm.dylib");
#system("rm -r $current/lib/*llvm.0.dylib");
#system("rm -r $current/bin/*.dSYM");
system("rm -r $current/lib/mono/fsharp/*");
system("rm -r $current/lib/mono/4.5/FSharp.*");
system("rm -r $current/lib/mono/4.0/FSharp.*");
system("rm -r $current/lib/mono/portable-*");
#system("rm -r $current/lib/libLTO.dylib");
#system("find $current/bin ! -name mono -type f -delete");

system("find $current -name \"*.mdb\" -exec rm -r {} +");
system("find $current -name \"*.dSYM\" -exec rm -r {} +");
system("find $current -name \"*.a\" -exec rm -r {} +");
system("find $current -name \"*.zip\" -exec rm -r {} +");
system("find $current -name \"*llvm*\" -exec rm -r {} +");
system("find $current -name \"*.la\" -exec rm -r {} +");
system("find $current -name \"*.pc\" -exec rm -r {} +");
system("rm -r $current/lib/libLTO.dylib");
system("rm -r $current/bin/llc");
system("rm -r $current/bin/opt");
system("rm -r $current/lib/mono/gac/FSharp.*");
# system("rm -r $current/lib/mono/gac/EntityFramework*");
system("rm $current/bin/mono-boehm");
system("rm $current/lib/mono/4.5/sqlmetal.exe");
system("rm $current/lib/libmonoboehm-2.0.1.dylib");

system("rm $current/bin/opt32");
system("rm $current/bin/opt64");
system("rm $current/bin/llc32");
system("rm $current/bin/llc64");
system("rm $current/bin/lli64");
system("rm $current/bin/lli32");
system("rm $current/lib/mono/msbuild/15.0/bin/Roslyn/Microsoft.CodeAnalysis.VisualBasic.dll");


mkpath("$current/etc/pango");
my $filename = "$current/etc/pango/pangorc";
open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
print $fh "[Pango]\n";
print $fh "ModuleFiles = $monosymlinkpath/etc/pango/pango.modules\n";
close $fh;

# Replace all hardcoded mono framework paths with symlink path.
chdir($current);
my @array = `grep -RIl /Library/Frameworks/Mono *`;

foreach $line (@array)
{
	chomp($line);
	printf "Patching Mono framework path in: $line\n";
	system("sed -i -e \"s,/Library/Frameworks/Mono.framework/Versions/$frameworkversion,$monosymlinkpath,g\" \"$line\"");
}

my $relocatescript = <<"END_MESSAGE";
#!/bin/sh

# !!!!!!!!!!This is an autogenerated file, generated by update_mono_framework.pl !!!!!!!!!!!!!!!!!!!!

MONO_FRAMEWORK_PATH="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
MONO_FRAMEWORK_SYMLINK="$monosymlinkpath"

if [ -d "$MONO_FRAMEWORK_SYMLINK" ]; then
  rm "$MONO_FRAMEWORK_SYMLINK"
fi

ln -sf "\$MONO_FRAMEWORK_PATH" "\$MONO_FRAMEWORK_SYMLINK"

export DYLD_FALLBACK_LIBRARY_PATH=\$MONO_FRAMEWORK_SYMLINK/lib:/lib:/usr/lib
export MONO_GAC_PREFIX=\$MONO_FRAMEWORK_SYMLINK
export MONO_PATH=\$MONO_FRAMEWORK_SYMLINK/lib/mono:\$MONO_FRAMEWORK_SYMLINK/lib/gtk-sharp-2.0
export MONO_CONFIG=\$MONO_FRAMEWORK_SYMLINK/etc/mono/config
export MONO_CFG_DIR=\$MONO_FRAMEWORK_SYMLINK/etc
export XDG_DATA_HOME=\$MONO_FRAMEWORK_SYMLINK/share
export GDK_PIXBUF_MODULE_FILE=\$MONO_FRAMEWORK_SYMLINK/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
export GDK_PIXBUF_MODULEDIR=\$MONO_FRAMEWORK_SYMLINK/lib/gtk-2.0/2.10.0/loaders
export GTK_DATA_PREFIX=\$MONO_FRAMEWORK_SYMLINK
export GTK_EXE_PREFIX=\$MONO_FRAMEWORK_SYMLINK
export GTK_PATH=\$MONO_FRAMEWORK_SYMLINK/lib/gtk-2.0:\$MONO_FRAMEWORK_SYMLINK/lib/gtk-2.0/2.10.0
export GTK2_RC_FILES=\$MONO_FRAMEWORK_SYMLINK/etc/gtk-2.0/gtkrc
export PKG_CONFIG_PATH="\$MONO_FRAMEWORK_SYMLINK/lib/pkgconfig:\$MONO_FRAMEWORK_SYMLINK/share/pkgconfig:\$PKG_CONFIG_PATH"
export PANGO_RC_FILE=\$MONO_FRAMEWORK_SYMLINK/etc/pango/pangorc

END_MESSAGE

my $filename = "$current/relocate_mono.sh";
open(my $fh, '>', $filename) or die "Could not open file '$filename' $!";
print $fh $relocatescript;
close $fh;


#now we will replace all embedded hardcoded paths inside the dylibs with versions without any path, so that OSX's dlopen() will use the normal DYLD_FALLBACK_LIBRARY_PATH that
#we setup, and that all dependent libraries cannot be accidentally be loaded from a system installed mono.
my $libpath = "$current/lib";
my @dylibs = <$libpath/*.dylib, $libpath/*.so>;

my $frameworkversionRegex = $frameworkversion;
$frameworkversionRegex =~ s/\./\\\./g;

foreach $dylib (@dylibs)
{
	print "Analyzing dependencies of dylib: $dylib\n";
	my @array = `otool -L $dylib`;
	foreach $line (@array)
	{
		chomp $line;
		my $prefix = "\t\/Library\/Frameworks\/Mono\.framework\/Versions\/$frameworkversionRegex\/lib\/";
		while($line =~ /$prefix(.*)\.dylib/g) {
			my $regexmatch = $1;
			my $command = "install_name_tool -change $prefix$regexmatch.dylib $regexmatch.dylib $dylib";
			print "About to patch reference $regexmatch with command: $command\n";
			system($command) && die("failed invoking install_name_tool");
		}
	}
}

chdir($scriptDir);
system("zip -r -y -9 dependencies/monoframework-osx.zip Mono.framework/");
rmtree($mf);


#print $relocatescript;